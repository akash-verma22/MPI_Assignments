// Question 1
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size, data;
    MPI_Init(&argc, &argv);              
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        printf("Run with at least two processes.\n");
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) {  
        data = 42;  
        printf("Process %d sending %d to process 1\n", rank, data);
        MPI_Send(&data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
    } else if (rank == 1) {  
        MPI_Status status;
        MPI_Recv(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
        printf("Process %d received %d from process 0\n", rank, data);
    }

    MPI_Finalize();
    return 0;
}




// Question 2
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (rank == 0) {
        int data[] = {10, 20, 30, 40, 50};
        int count = 5;
        MPI_Send(data, count, MPI_INT, 1, 0, MPI_COMM_WORLD);
        printf("Process 0 sent %d integers\n", count);
    } else if (rank == 1) {
        MPI_Status status;
        MPI_Probe(0, 0, MPI_COMM_WORLD, &status);

        int count;
        MPI_Get_count(&status, MPI_INT, &count);

        int* received_data = (int*)malloc(count * sizeof(int));
        MPI_Recv(received_data, count, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        printf("Process 1 received %d integers:\n", count);
        for (int i = 0; i < count; i++) {
            printf("%d ", received_data[i]);
        }
        printf("\n");

        free(received_data);
    }

    MPI_Finalize();
    return 0;
}





// Question 3 
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_STEPS 10 

int main(int argc, char** argv) {
    int rank, size, walker, steps = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank);  

    if (rank == 0) {
        walker = rand() % size;  
        printf("Master starts walker at process %d\n", walker);
        MPI_Send(&steps, 1, MPI_INT, walker, 0, MPI_COMM_WORLD);  
    }

    while (steps < MAX_STEPS) {
        MPI_Status status;
        MPI_Recv(&steps, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);

        printf("Walker at process %d, step %d\n", rank, steps);

        if (steps >= MAX_STEPS) {
            printf("Walker stops at process %d after %d steps.\n", rank, steps);
            break;  
        }

        steps++;  
        int next_process;
        do {
            next_process = rand() % size;
        } while (next_process == rank);

        MPI_Send(&steps, 1, MPI_INT, next_process, 0, MPI_COMM_WORLD);
    }

    MPI_Barrier(MPI_COMM_WORLD);  
    MPI_Finalize();
    return 0;
}






